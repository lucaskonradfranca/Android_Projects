package com.daniel.convert;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class ConvertToArff {

	/**
	 * @param args
	 * @throws IOException
	 */

	double powerSum1 = 0;
	double powerSum2 = 0;
	double stdev = 0;
	static String relation = "wifis";

	static String[] parts;

	// static List<String> bssid = new ArrayList<String>();
	// // service set identifier - mac do AP
	// static List<String> ssid = new ArrayList<String>();
	// // received signal strength indicator - potencia do sinal (-87 a -32)
	// static List<String> rssi = new ArrayList<String>();
	// // nome da sala
	// static List<String> sala = new ArrayList<String>();
	// // numero da contagem, identificador único por contagem (UUID)
	// static List<String> contagem = new ArrayList<String>();

	// nome das salas identifacadas, sem repetir
	static List<String> nomeSalas = new ArrayList<String>();
	// nome dos APs identifacados, sem repetir
	static List<String> nomeAp = new ArrayList<String>();
	// chave primária,
	static List<String> key = new ArrayList<String>();
	// códigos das contagems
	static List<String> contagem = new ArrayList<String>();

	// lista de access points
	static List<AccessPoint> AccessPoints = new ArrayList<AccessPoint>();
	// lista de rssi que será normalizado
	static List<AccessPoint> tempAccessPoints = new ArrayList<AccessPoint>();

	// static Map<String, List<?>> referenceMap = new HashMap<>();
	// static {
	// // basic service set identifier - nome do AP
	// referenceMap.put("bssid", new ArrayList<String>());
	// }

	public static void main(String arg[]) {
		File path = new File("C:\\Users\\daniel.arthur\\Desktop\\WifiSignal\\");
		try {
			listFilesForFolder(path);
			geraArff(path);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		// System.out.println(rssi);
	}

	/**
	 * Cria arrays com mac da rede, sinal, sala, e identificador único da
	 * contagem
	 * 
	 * @param file
	 *            um arquivo com as informações do sinal
	 */
	public static void loadData(File file) throws IOException {
		String line;
		String uuid = UUID.randomUUID().toString();

		/*
		 * Contagem contagem = new Contagem();
		 * 
		 * contagem.setUuid(uuid); contagem.setQuantidade(0);
		 */

		BufferedReader br = new BufferedReader(new FileReader(file));

		tempAccessPoints.clear();

		while ((line = br.readLine()) != null) {
			// process the line.
			// contagem.setQuantidade(contagem.getQuantidade() + 1);

			AccessPoint AccessPoint = new AccessPoint();

			// System.out.println(line);
			parts = line.split("\\x7C"); // \\x7C = | em ASCII

			// bssid.add(parts[0]);
			// ssid.add(parts[1]);
			// tempRssi.add(parts[2]);
			// sala.add(parts[3]);
			// contagem.add(uuid);
			// key.add(parts[1] + parts[2] + parts[3] + uuid);

			AccessPoint.setBssid(parts[0]);
			AccessPoint.setSsid(parts[1]);
			AccessPoint.setRssi(parts[2]);
			AccessPoint.setSala(parts[3]);
			// AccessPoint.setContagem(uuid);
			AccessPoint.setContagem(parts[4]);

			tempAccessPoints.add(AccessPoint);

			if (!nomeSalas.contains(parts[3])) {
				nomeSalas.add(parts[3]);
			}
			if (!nomeAp.contains(parts[1])) {
				nomeAp.add(parts[1]);
			}
		}

		contagem.add(uuid);

		// quantContagem.add(contagem);
		AccessPoints.addAll(normalize(tempAccessPoints));

		br.close();
	}

	/**
	 * Geral: Mostra os arquivos da pasta informada
	 * 
	 * @param folder
	 *            pasta onde estão os arquivos
	 */
	public static void listFilesForFolder(final File folder) throws IOException {
		for (final File fileEntry : folder.listFiles()) {
			if (fileEntry.isDirectory()) {
				listFilesForFolder(fileEntry);
			} else {
				// cont += 1;
				loadData(fileEntry);
			}
		}
	}

	public static List<AccessPoint> normalize(List<AccessPoint> lista)
			throws IOException {

		/*
		 * x = (x - y) / a x = intensidade do sinal, y(mi) = média dos sinais, a
		 * = desvio padrão
		 */
		List<AccessPoint> listaRetorno = new ArrayList<AccessPoint>();

		double average = 0, finalsum = 0;

		for (int i = 0; i < lista.size(); i++) {
			finalsum += Double.parseDouble(lista.get(i).getRssi());
		}

		average = finalsum / (lista.size());

		double std = StandardDeviationCalc.stdDev(lista);

		// System.out.println(std);

		for (int i = 0; i < lista.size(); i++) {
			AccessPoint ap = new AccessPoint();

			ap.setBssid(lista.get(i).getBssid());
			ap.setSsid(lista.get(i).getSsid());
			ap.setRssi(String.valueOf(((Double.parseDouble(lista.get(i)
					.getRssi()) - average) / std)));
			ap.setSala(lista.get(i).getSala());
			ap.setContagem(lista.get(i).getContagem());

			listaRetorno.add(ap);
		}
		// System.out.println(listaRetorno);

		return listaRetorno;
	}

	public static void geraArff(File file) {
		Writer writer = null;
		String sinal = "";

		try {
			writer = new BufferedWriter(new OutputStreamWriter(
					new FileOutputStream(file + "\\saida.arff"), "utf-8"));

			writer.write("%Titulo:\n%Fontes:\n%Informações úteis:\n\n@RELATION "
					+ relation + "\n\n");

			for (int i = 0; i < nomeAp.size(); i++) {
				writer.write("@ATTRIBUTE \"" + nomeAp.get(i) + "\" REAL\n");
			}

			writer.write("@ATTRIBUTE class {");
			for (int i = 0; i < nomeSalas.size(); i++) {
				if (i + 1 == nomeSalas.size()) {
					writer.write(nomeSalas.get(i) + "}\n\n");
				} else {
					writer.write(nomeSalas.get(i) + ",");
				}
			}

			writer.write("@DATA\n");

			for (int i = 0; i < nomeSalas.size(); i++) {
				for (int j = 1; j <= 5; j++) { // contagem
					for (int k = 0; k < nomeAp.size(); k++) {
						for (int m = 0; m < AccessPoints.size(); m++) {
							if (AccessPoints.get(m).getSsid()
									.equals(nomeAp.get(k))
									&& AccessPoints.get(m).getSala()
									.equals(nomeSalas.get(i))
									&& Integer.parseInt(AccessPoints.get(m)
											.getContagem()) == j) {
								sinal = AccessPoints.get(m).getRssi() + ",";
								break;
							}
						}
						if (sinal != "") {
							writer.write(sinal);
							sinal = "";
						} else {
							writer.write("0,");
							sinal = "";
						}

					}
					writer.write(nomeSalas.get(i) + "\n");
				}
			}

		} catch (IOException ex) {
			// report

		} finally {
			try {
				writer.close();
			} catch (Exception ex) {
			}
		}
	}

}